// Reqisitando as funÃ§Ãµes do pacote do express
const express = require('express');

//Instanciando o CORS
const cors = require('cors');

const { uuid, isUuid } = require('uuidv4');

// Invocando todos os mÃ©todos do objeto do express em uma variÃ¡vel
const app = express();

//Invocando o CORS
app.use(cors());

// O express por padrÃ£o nao lÃª informaÃ§Ãµes do tipo JSON, para isso Ã© necesÃ¡rio passar esse mÃ©todo para o express
app.use(express.json());

const projects = [];

// FunÃ§Ãµes Middlewares que vÃ£o interceptar uma requisiÃ§Ã£o para poder monitorar ou interrompe-la dependendo da ocasiÃ£o.
function logRequests(request, response, next) {
    const { method, url } = request;

    const logLabel = `[${method.toUpperCase()}] ${url}`

    console.time(logLabel);

    next(); // PrÃ³ximo middleware

    console.timeEnd(logLabel)
}

function validateProjectId(request, response, next) {
    const { id } = request.params;

    if(!isUuid(id)) {
        return response.status(400).json({ error: 'Invalid project ID.' });
    }

    return next();
}

app.use(logRequests);
app.use('/projects/:id', validateProjectId)

// Gerando a primeira requisiÃ§Ã£o HTTP, enviando uma resposta para o cliente saber que a conexÃ£o esta online
app.get('/projects', (request, response) => {
    {/**Ultilizando query params para filtrar determinado parametro da informaÃ§Ã£o, fazendo uma desestruturaÃ§Ã£o em variavÃ©l */}
    const { title } = request.query;

    const results = title
      ? projects.filter(project => project.title.includes(title))
      : projects;

    return response.json(results);
});

/**Testando outra requisiÃ§Ã£o HTTP, porem agora o metodo 'post', que serve para criar uma informaÃ§Ã£o no backend,
utilizando a mesma rota porem com o metodo diferente. */

app.post('/projects', (request, response) => {
    {/**Ultilizando request body no metodo post/ inserindo parametros dentro de uma variavel para armazenar informaÃ§Ãµes
    dentro desses parametros, ultilizando o metodo push do javascript */}
    const { title, owner } = request.body;

    const project = { id: uuid(), title, owner };

    projects.push(project);

    return response.json(project);
});

/**Nos metodos put e delete, a rota Ã© um pouco diferente pois quando se fala em alterar ou remover uma informaÃ§Ã£o do backend,
temos que especificar qual informaÃ§Ã£o queremos alterar ou remover e nÃ£o todas as informaÃ§Ãµes, para isso especificamosna rota
o id unico da informaÃ§Ã£o que queremos altertar*/
app.put('/projects/:id', (request, response) => {
    {/**Ultilizando route params no metodo put, que tambem Ã© usado no metodo delete/ percorrendo as informaÃ§Ãµes ja listadas
    no array da variavel e identificando qual informaÃ§Ã£o atraves da sua posiÃ§Ã£o no array de informaÃ§Ãµes para poder atualizar
    os parametros contidos dentro de uma informaÃ§Ã£o. */}
    const { id } = request.params;
    const { title, owner } = request.body;

    const projectIndex = projects.findIndex(project => project.id === id);

    {/**Micro-validaÃ§Ã£o para saber se essa informaÃ§Ã£o existe */}
    if (projectIndex < 0) {
        return response.status(400).json({ error: 'Project not found.' })
    }

    {/**Criando uma nova variavel e os novos parametros para a atualizaÃ§Ã£o da informaÃ§Ã£o */}
    const project = {
        id,
        title,
        owner,
    }

    projects[projectIndex] = project;

    return response.json(project);
});

app.delete('/projects/:id', (request, response) => {
    {/**Ultilizando route params no metodo put, que tambem Ã© usado no metodo delete/ percorrendo as informaÃ§Ãµes ja listadas
    no array da variavel e identificando qual informaÃ§Ã£o atraves da sua posiÃ§Ã£o no array de informaÃ§Ãµes para poder deletar 
    uma informaÃ§Ã£o. */}
    const { id } = request.params;

    const projectIndex = projects.findIndex(project => project.id === id);

    {/**Micro-validaÃ§Ã£o para saber se essa informaÃ§Ã£o existe */}
    if (projectIndex < 0) {
        return response.status(400).json({ error: 'Project not found.' })
    }

    projects.splice(projectIndex, 1)

    return response.status(204).send();
});

// Porta onde esta sendo ouvida o servidor e uma mensagem no backend para saber que o server esta online
app.listen(3333, () => {
    console.log('ğŸ“¡Backend online!');
});