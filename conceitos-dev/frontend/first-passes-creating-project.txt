Iniciando projeto fullstack padrao

***Criando frontend***

Dentro da pasta do frontend executar no terminal

- yarn init -y

Na pasta frontend, executar no terminal

- yarn add react react-dom

Criar na pasta public o arquivo index.html e escrever o corpo básico de uma page html

Para instalação do Babel, webpack e os loaders, executar no terminal dentro da pasta frontend

- yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli

Na pasta frontend criar o arquivo babel.config.js e inserir as configurações

module.exports = {
    presets: [
        '@babel/preset-env',
        '@babel/preset-react'
    ],
};

Na pasta src criar o arquivo index.js

Na pasta frontend inserir os codigos no terminal

- yarn add @babel/cli

Para saber se o babel esta convertendo o codigo react para um codigo mais tradicional, inserir no terminal

- yarn babel src/index.js --out-file public/bundle.js

Na pasta frontend criar o arquivo weboack.config.js para configuração do webpack

Para instalação do loader do babel, executar no terminal na pasta frontend

- yarn add babel-loader

Para configuração do webpack, inserir no arquivo webpack.config.js:

const path = require('path');

module.exports = {
    entry: path.resolve(__dirname, 'src', 'index.js'),
    output: {
        path: path.resolve(__dirname, 'public'),
        filename: 'bundle.js'
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node.modules/,
                use: {
                    loader: 'babel-loader',
                }
            }
        ]
    },
};

Para a conversão do arquivo execultar no terminal

- yarn webpack --mode development

No terminal executar 

- yarn add webpack webpack-dev-server -D

No arquivo de configuração do webpack, abaixo da linha filename, adicionar codigo

devServer: {
    contentBase: path.resolve(__dirname, 'public'),
},

No terminal executar 

- yarn webpack-dev-server --mode development

***Criando o primeiro componente***

Dentro da pasta src, criar o arquivo App.js

Dentro do Arquivo App.js, sera colocado a importação base necessaria do react, e logo depois segue-se para criação 
do componente, injetando html pelo js atraves de funcoes

Para melhor organização, criar pasta components para armazanar todos os componentes que forem ser utilizados no projeto

Para importação de arquivos CSS, precisa configurar nova regra. No arquivo webpack.config.js, 
inserir as seguintes linhas, dentro da 'rules'

            {
                test: /\.css$/,
                exclude: /node_modules/,
                use: [
                    { loader: 'style-loader' },
                    { loader: 'css-loader' },
                ]
            }

No terminal , executar os seguintes comando para instalação dos pacotes

- yarn add style-loader css-loader

Criar arquivo App.css dentro da pasta src

Para melhorar a build do projeto e simplificar o comando de build, no arquivo packege.json, adicionar as determinadas 
linhas de codigo, depois da linha 'license'

  "scripts": {
    "dev": "yarn webpack-dev-server --mode development",
    "build": "webpack --mode production"
  },

Agora sempre que precisar fazer rebuild do projeto, executa-se so o comando 'yarn dev'

Para importação de arquivos em geral como por exemplo arquivos de imagem, instalar modulo

- yarn add file-loader

Dentro da pasta src criar pasta assets e colocar um arquivo de imagem la dentro

***Conectando o frontend ao backend***

No terminal, dentro da pasta frontend, executar o comandop para instalação do modulo que ira conectar o frontend ao backend

- yarn add axios

Criar dentro da pasta src, a pasta services e logo depois o arquivo api.js

Apos a criacao e configuração do arquivo de chamada a api do backend, importar esse arquivo de api no arquivo geral 
do projeto frontend App.js

Para poder utilizar funções assincronas, deve-se instalar no frontend um plugin para o babel, pois ele nao suporta usar funcoes desse modo

- yarn add @babel/plugin-transform-runtime -D